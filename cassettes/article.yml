---
http_interactions:
- request:
    method: get
    uri: https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&rvprop=content&titles=service-oriented%20architecture
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - en.wikipedia.org
      User-Agent:
      - http.rb/3.0.0
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 22 Oct 2017 09:49:30 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - close
      Server:
      - mw1313.eqiad.wmnet
      X-Powered-By:
      - HHVM/3.18.6-dev
      X-Content-Type-Options:
      - nosniff
      Cache-Control:
      - private, must-revalidate, max-age=0
      P3p:
      - CP="This is not a P3P policy! See https://en.wikipedia.org/wiki/Special:CentralAutoLogin/P3P
        for more info."
      X-Frame-Options:
      - SAMEORIGIN
      Content-Disposition:
      - inline; filename="api-result.json"
      Vary:
      - Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization
      Backend-Timing:
      - D=38534 t=1508665770233824
      X-Varnish:
      - 777919752, 392379155, 119155904, 461866035
      Via:
      - 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      X-Cache:
      - cp1065 pass, cp2010 pass, cp4010 pass, cp4017 pass
      X-Cache-Status:
      - pass
      Strict-Transport-Security:
      - max-age=106384710; includeSubDomains; preload
      Set-Cookie:
      - GeoIP=US:CA:Mountain_View:37.42:-122.06:v4; Path=/; secure; Domain=.wikipedia.org
      - WMF-Last-Access-Global=22-Oct-2017;Path=/;Domain=.wikipedia.org;HttpOnly;secure;Expires=Thu,
        23 Nov 2017 00:00:00 GMT
      - WMF-Last-Access=22-Oct-2017;Path=/;HttpOnly;secure;Expires=Thu, 23 Nov 2017
        00:00:00 GMT
      X-Analytics:
      - ns=-1;special=Badtitle;https=1;nocookies=1
      X-Client-Ip:
      - 35.201.173.36
    body:
      encoding: UTF-8
      string: '{"batchcomplete":"","query":{"normalized":[{"from":"service-oriented
        architecture","to":"Service-oriented architecture"}],"pages":{"666924":{"pageid":666924,"ns":0,"title":"Service-oriented
        architecture","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{Use
        mdy dates|date=April 2015}}\nA ''''''service-oriented architecture'''''' (''''''SOA'''''')
        is a style of software design where services are provided to the other components
        by [[application components]], through a [[Communications protocol|communication
        protocol]] over a network. The basic principles of service-oriented architecture
        are independent of vendors, products and technologies.<ref>{{Cite web|url=https://msdn.microsoft.com/en-us/library/bb833022.aspx|title=Chapter
        1: Service Oriented Architecture (SOA)|website=msdn.microsoft.com|access-date=2016-09-21}}</ref>\nA
        service is a discrete unit of functionality that can be accessed remotely
        and acted upon and updated independently, such as retrieving a credit card
        statement online.\n\nA service has four properties according to one of many
        definitions of SOA:<ref>http://www.opengroup.org/standards/soa</ref>\n# It
        logically represents a business activity with a specified outcome.\n# It is
        self-contained.\n# It is a [[black box]] for its consumers.\n# It may consist
        of other underlying services.<ref>{{Cite web|url=http://www.opengroup.org/soa/source-book/soa/soa.htm|title=What
        Is SOA?|website=www.opengroup.org|access-date=2016-09-21}}</ref>\n\nDifferent
        services can be used in conjunction to provide the functionality of a large
        [[Software applications|software application]].<ref>{{Cite book|title=Cloud
        Computing: A Practical Approach|last=Velte|first=Anthony T.|publisher=McGraw
        Hill|year=2010|isbn=978-0-07-162694-1|location=|pages=|via=}}</ref> So far,
        the definition could be a definition of modular programming in the 1970s.
        Service-oriented architecture is less about how to modularize an application,
        and more about how to compose an application by integration of distributed,
        separately-maintained and deployed software components. It is enabled by technologies
        and standards that make it easier for components to communicate and cooperate
        over a network, especially an IP network.\n\n== Overview ==\nIn SOA, services
        use protocols that describe how they [[Message passing|pass]] and parse messages
        using description [[metadata]]. This metadata describes both the functional
        characteristics of the service and quality-of-service characteristics. Service-oriented
        architecture aims to allow users to combine large chunks of functionality
        to form applications which are built purely from existing services and combining
        them in an ad hoc manner. A service presents a simple interface to the requester
        that abstracts away the underlying complexity acting as a black box. Further
        users can also access these independent services without any knowledge of
        their internal implementation.<ref>{{Cite web|url=http://www-128.ibm.com/developerworks/library/ws-migratesoa/
        |title=Migrating to a service-oriented architecture, Part 1 |date=2008-12-09
        |access-date=2016-09-21 |deadurl=bot: unknown |archiveurl=https://web.archive.org/web/20081209120916/http://www-128.ibm.com/developerworks/library/ws-migratesoa/
        |archivedate=December 9, 2008 |df= }}</ref>\n\n== Defining concepts ==\nThe
        related buzzword [[service-orientation]] promotes ''''[[loose coupling]]''''
        between services. SOA separates functions into distinct units, or services,<ref
        name=\"Bell\">{{cite book|title=Service-Oriented Modeling: Service Analysis,
        Design, and Architecture|publisher=Wiley & Sons|year=2008|isbn=978-0-470-14111-3|page=3|chapter=Introduction
        to Service-Oriented Modeling|author=Michael Bell}}</ref> which developers
        make accessible over a network in order to allow users to combine and reuse
        them in the production of applications. These services and their corresponding
        consumers communicate with each other by passing data in a well-defined, shared
        format, or by coordinating an activity between two or more services.<ref name=\"Bell_\">{{
        cite book |author=Michael Bell|title=SOA Modeling Patterns for Service-Oriented
        Discovery and Analysis |year=2010 |publisher=Wiley & Sons|isbn=978-0-470-48197-4
        |page=390 }}</ref>\n\nA manifesto was published for service-oriented architecture
        in October, 2009. This came up with six core values which are listed as follows:<ref>{{Cite
        web|url=http://www.soa-manifesto.org/|title=SOA Manifesto|website=www.soa-manifesto.org|access-date=2016-09-21}}</ref>\n#
        ''''''Business value'''''' is given more importance than technical strategy.\n#
        ''''''Strategic goals'''''' are given more importance than project-specific
        benefits.\n# ''''''Intrinsic inter-operability'''''' is given more importance
        than custom integration.\n# ''''''Shared services'''''' are given more importance
        than specific-purpose implementations.\n# ''''''Flexibility'''''' is given
        more importance than optimization.\n# ''''''Evolutionary refinement''''''
        is given more importance than pursuit of initial perfection.\n\nSOA can be
        seen as part of the continuum which ranges from the older concept of [[distributed
        computing]]<ref name=\"Bell\" /><ref name=\"Erl\">Thomas Erl (June 2005).
        ''''About the Principles''''. Serviceorientation.org</ref> and [[modular programming]],
        through SOA, and on to current practices of [[Mashup (web application hybrid)|mashup]]s,
        [[SaaS]], and [[cloud computing]] (which some see as the offspring of SOA).<ref>{{cite
        web|url=http://apsblog.burtongroup.com/2009/01/soa-is-dead-long-live-services.html
        |title=Application Platform Strategies Blog: SOA is Dead; Long Live Services
        |publisher=Apsblog.burtongroup.com |date=January 5, 2009 |accessdate=August
        13, 2012 }}</ref>\n\n== Principles ==\nThere are no industry standards relating
        to the exact composition of a service-oriented architecture, although many
        industry sources have published their own principles.  Some of these<ref>Yvonne
        Balzer [http://www-128.ibm.com/developerworks/webservices/library/ws-improvesoa/
        Improve your SOA project plans], ''''IBM'''', July 16, 2004</ref><ref>{{cite
        web |url= http://msdn.microsoft.com/en-us/library/bb972954.aspx |title=Principles
        of Service Oriented Design |author=Microsoft Windows Communication Foundation
        team |work=msdn.microsoft.com |year=2012 |accessdate=September 3, 2012}}</ref><ref
        name=\"Terl\">Principles by [[Thomas Erl]] of SOA Systems Inc. [http://soaprinciples.com
        eight specific service-orientation principles]</ref><ref>{{cite book|author=M.
        Hadi Valipour|title= 2009 2nd IEEE International Conference on Computer Science
        and Information Technology|author2= Bavar AmirZafari|author3= Kh. Niki Maleki|author4=
        Negin Daneshpour|doi=10.1109/ICCSIT.2009.5235004 |pages=34\u201338|chapter=
        A brief survey of software architecture concepts and service oriented architecture|year=
        2009|isbn= 978-1-4244-4519-6}}</ref>\ninclude the following:\n; [[Standardized
        service contract]]\n: Services adhere to a standard communications agreements,
        as defined collectively by one or more service-description documents within
        a given set of services.\n; Service reference autonomy (an aspect of loose
        coupling)\n: The relationship between services is minimized to the level that
        they are only aware of their existence.\n; Service location transparency (an
        aspect of loose coupling)\n: Services can be called from anywhere within the
        network that it is located no matter where it is present.\n; Service longevity\n:
        Services should be designed to be long lived. Where possible services should
        avoid forcing consumers to change if they do not require new features, if
        you call a service today you should be able to call the same service tomorrow.\n;
        [[Service abstraction]]\n: The services act as black boxes, that is their
        inner logic is hidden from the consumers.\n; [[Service autonomy principle|Service
        autonomy]]\n: Services are independent and control the functionality they
        encapsulate, from a Design-time and a run-time perspective.\n; [[Service statelessness
        principle|Service statelessness]]\n: Services are stateless, that is either
        return the requested value or give an exception hence minimizing resource
        use.\n; [[Service granularity principle|Service granularity]]\n: A principle
        to ensure services have an adequate size and scope. The functionality provided
        by the service to the user must be relevant. \n; Service normalization\n:
        Services are decomposed or consolidated (normalized) to minimize redundancy.
        In some, this may not be done, These are the cases where performance optimization,
        access, and aggregation are required.<ref>{{cite book|author=Tony Shan|title=IEEE
        International Conference on ''''Services'''' Computing, 2004. (SCC 2004).
        Proceedings. 2004 |doi=10.1109/SCC.2004.1358011 |pages=237\u2013244|year=2004|chapter=Building
        a service-oriented e ''''Banking'''' platform |isbn=0-7695-2225-4 }}2004</ref>\n;
        [[Service composability principle|Service composability]]\n: Services can
        be used to compose other services.\n; [[Service discovery]]\n: Services are
        supplemented with communicative meta data by which they can be effectively
        discovered and interpreted.\n; [[Service reusability principle|Service reusability]]\n:
        Logic is divided into various services, to promote reuse of code.\n; Service
        [[Encapsulation (computer science)|encapsulation]]\n: Many services which
        were not initially planned under SOA, may get encapsulated or become a part
        of SOA.\n\n== Patterns ==\nEach SOA building block can play any of the three
        roles:\n\n; Service provider\n: It creates a web service and provides its
        information to the service registry. Each provider debates upon a lot of hows
        and whys like which service to expose, whom to give more importance: security
        or easy availability, what price to offer the service for and many more''''.''''
        The provider also has to decide what category the service should be listed
        in for a given broker service<ref>{{cite web|url=http://ieeexplore.ieee.org/document/6928915/|title=Exploring
        Cloud Service Brokering from an Interface Perspective|last1=Duan |first1=Yucong
        |last2=Narendra |first2= Nanjangud |last3=Du |first3=Wencai |last4=Wang |first4=Yongzhi
        |last5=Zhou|first5=Nianjun|publisher=[[IEEE]]}}</ref> and what sort of trading
        partner agreements are required to use the service.\n; Service broker, service
        registry or service repository\n: Its main functionality is to make the information
        regarding the web service available to any potential requester. Whoever implements
        the broker decides the scope of the broker. Public brokers are available anywhere
        and everywhere but private brokers are only available to a limited amount
        of public. UDDI was an early, no longer actively supported attempt to provide
        [[Web Services Discovery|Web services discovery]].\n; Service requester/consumer\n:
        It locates entries in the broker registry using various find operations and
        then binds to the service provider in order to invoke one of its web services.
        Whichever service the service-consumers need, they have to take it into the
        brokers, bind it with respective service and then use it. They can access
        multiple services if the service provides multiple services.\n\nThe service
        consumer\u2013provider relationship is governed by a [[standardized service
        contract]],<ref>{{cite web |url=http://ieeexplore.ieee.org/document/6299375/|title=A
        Survey on Service Contract |last1=Duan |first1=Yucong |publisher=[[IEEE]]}}</ref>
        which has a business part, a functional part and a technical part.\n\n[[Service
        composability principle|Service composition patterns]] have two broad, high-level
        architectural styles: [[Service choreography#Service choreography and service
        orchestration|choreography and orchestration]]. Lower level enterprise integration
        patterns that are not bound to a particular architectural style continue to
        be relevant and eligible in SOA design.<ref name=\"ieeesweip\">{{Cite journal
        | url = http://ieeexplore.ieee.org/document/7368007/ | doi = 10.1109/MS.2016.11
        | title = A Decade of Enterprise Integration Patterns | journal = IEEE Software
        | volume = 33 | issue = 1 | pages =  13\u201319 | year = 2016 | last1 = Olaf
        Zimmermann, Cesare Pautasso, Gregor Hohpe, Bobby Woolf | first1 = }}</ref><ref>{{Cite
        book | last=Rotem-Gal-Oz | first=Arnon | title= SOA Patterns | publisher=
        Manning Publications | year=2012 | location= | isbn=978-1933988269 }}</ref><ref>K.
        Julisch et al., [http://soadecisions.org/download/ComplianceByDesign-AAM.pdf
        Compliance by Design \u2013 Bridging the Chasm between Auditors and IT Architects].
        Computers & Security, Elsevier. Volume 30, Issue 6-7, Sep.-Oct. 2011.</ref>\n\n==
        Implementation approaches ==\nService-oriented architecture can be implemented
        with [[Web service]]s.<ref>Brandner, M., Craes, M., Oellermann, F., Zimmermann,
        O., Web Services-Oriented Architecture in Production in the Finance Industry,
        Informatik-Spektrum 02/2004, Springer-Verlag, 2004</ref> This is done to make
        the functional building-blocks accessible over standard Internet protocols
        that are independent of platforms and programming languages. These services
        can represent either new applications or just wrappers around existing legacy
        systems to make them network-enabled.<ref>{{Cite web|url=http://www.ibm.com/support/knowledgecenter/en/SSEQTP_6.1.0/com.ibm.websphere.base.iseries.doc/info/iseries/ae/cwbs_soawbs.html|title=www.ibm.com|access-date=2016-09-10}}</ref>\n\nImplementers
        commonly build SOAs using web services standards. One example is [[SOAP]],
        which has gained broad industry acceptance after recommendation of Version
        1.2 from the W3C<ref>{{cite web|url=http://www.w3.org/2003/06/soap12-pressrelease
        |title=SOAP Version 1.2 \u306e\u516c\u958b\u306b\u3064\u3044\u3066 (W3C \u52e7\u544a)
        |language=ja |publisher=W3.org |accessdate=August 13, 2012 }}</ref> (World
        Wide Web Consortium) in 2003. These standards (also referred to as [[List
        of web service specifications|web service specifications]]) also provide greater
        interoperability and some protection from lock-in to proprietary vendor software.
        One can, however, also implement SOA using any other service-based technology,
        such as [[Jini]], [[CORBA]] or [[Representational State Transfer|REST]].\n\nArchitectures
        can operate independently of specific technologies and can therefore be implemented
        using a wide range of technologies, including:\n* [[Web services]] based on
        WSDL and [[SOAP]]\n* Messaging, e.g., with ActiveMQ, JMS, RabbitMQ\n* RESTful
        HTTP, with [[Representational state transfer]] (REST) constituting its own
        constraints-based architectural style\n* [[OPC Unified Architecture|OPC-UA]]\n*
        [[Windows Communication Foundation|WCF]] (Microsoft''s implementation of Web
        services, forming a part of WCF)\n* [[Apache Thrift]]\n* [[SORCER]]\n\nImplementations
        can use one or more of these protocols and, for example, might use a file-system
        mechanism to communicate data following a defined interface specification
        between processes conforming to the SOA concept. The key is independent services
        with defined interfaces that can be called to perform their tasks in a standard
        way, without a service having foreknowledge of the calling application, and
        without the application having or needing knowledge of how the service actually
        performs its tasks. SOA enables the development of applications that are built
        by combining loosely coupled and [[interoperable]] services.\n\nThese services
        inter-operate based on a formal definition (or contract, e.g., WSDL) that
        is independent of the underlying platform and programming language. The interface
        definition [[Information hiding|hides the implementation]] of the language-specific
        service. SOA-based systems can therefore function independently of development
        technologies and platforms (such as Java, .NET, etc.). Services written in
        C# running on .NET platforms and services written in Java running on [[Java
        Platform, Enterprise Edition|Java EE]] platforms, for example, can both be
        consumed by a common composite application (or client). Applications running
        on either platform can also consume services running on the other as web services
        that facilitate reuse. Managed environments can also wrap COBOL legacy systems
        and present them as software services.<sup>[[Service-oriented architecture#cite
        note-23|.]]</sup><ref>{{Cite web|url=http://www.fujitsu.com/global/documents/about/resources/publications/fstj/archives/vol42-3/paper18.pdf|title=.
        \"Case Study of System Architecture that use COBOL assets\"|last=Okishima|first=Haruhiru|date=2006|website=|publisher=|access-date=}}</ref>\n\n[[High-level
        programming language]]s such as [[BPEL]] and specifications such as [[WS-CDL]]
        and [[WS-Coordination]] extend the service concept by providing a method of
        defining and supporting orchestration of fine-grained services into more coarse-grained
        business services, which architects can in turn incorporate into workflows
        and business processes implemented in [[composite applications]] or [[Enterprise
        portal|portals]]<ref>{{Cite journal|last=Kyriazis|first=Dimosthenis|last2=Tserpes|first2=Konstantinos|last3=Menychtas|first3=Andreas|last4=Sarantidis|first4=Ioannis|last5=Varvarigou|first5=Theodora|date=2009-04-25|title=Service
        selection and workflow mapping for Grids: an approach exploiting quality-of-service
        information|url=http://onlinelibrary.wiley.com/doi/10.1002/cpe.1343/abstract|journal=Concurrency
        and Computation: Practice and Experience|language=en|volume=21|issue=6|pages=739\u2013766|doi=10.1002/cpe.1343|issn=1532-0634}}</ref>\n\n[[Service-oriented
        modeling]] is an SOA framework that identifies the various disciplines that
        guide SOA practitioners to conceptualize, analyze, design, and architect their
        service-oriented assets. The [[Service-oriented modeling#Service-oriented
        modeling framework|Service-oriented modeling framework (SOMF)]] offers a modeling
        language and a work structure or \"map\" depicting the various components
        that contribute to a successful service-oriented modeling approach. It illustrates
        the major elements that identify the \"what to do\" aspects of a service development
        scheme. The model enables practitioners to craft a [[project plan]] and to
        identify the milestones of a service-oriented initiative. SOMF also provides
        a common modeling notation to address alignment between business and IT organizations.[[File:SOA
        Elements.png|thumb|450px|right|Elements of SOA, by Dirk Krafzig, Karl Banke,
        and Dirk Slama<ref>''''Enterprise SOA''''. Prentice Hall, 2005</ref>]]\n[[File:SOA
        Metamodel.svg|thumb|450px|right|SOA meta-model, The Linthicum Group, 2007]]\n\n==
        Organizational benefits ==\nSome [[enterprise architect]]s believe that SOA
        can help businesses respond more quickly and more cost-effectively to changing
        market conditions.<ref>Christopher Koch [http://www.cio.com.au/index.php/id;1350140708
        A New Blueprint For The Enterprise], ''''CIO Magazine'''', March 1, 2005</ref>
        This style of ''''architecture'''' promotes reuse at the macro (service) level
        rather than micro (classes) level. It can also simplify interconnection to\u2014and
        usage of\u2014existing IT (legacy) assets.\n\nWith SOA, the idea is that an
        organization can look at a problem holistically. A business has more overall
        control. Theoretically there would not be a mass of developers using whatever
        tool sets might please them. But rather they would be coding to a standard
        that is set within the business. They can also develop enterprise-wide SOA
        that encapsulates a business-oriented infrastructure. SOA has also been illustrated
        as a highway system providing efficiency for car drivers. The point being
        that if everyone had a car, but there was no highway anywhere, things would
        be limited and disorganized, in any attempt to get anywhere quickly or efficiently.
        IBM Vice President of Web Services Michael Liebow says that SOA \"builds highways\".<ref>Elizabeth
        Millard (January 2005). \"Building a Better Process\". ''''Computer User''''.
        Page 20.</ref>\n\nIn some respects, SOA could be regarded as an architectural
        evolution rather than as a revolution. It captures many of the [[best practice]]s
        of previous software architectures. In communications systems, for example,
        little development of solutions that use truly static bindings to talk to
        other equipment in the network has taken place. By embracing a SOA approach,
        such systems can position themselves to stress the importance of well-defined,
        highly inter-operable interfaces. Other predecessors of SOA include [[Component-based
        software engineering]] and Object-Oriented Analysis and Design (OOAD) of remote
        objects, for instance, in [[CORBA]].\n\nA service comprises a stand-alone
        unit of functionality available only via a formally defined interface. Services
        can be some kind of \"nano-enterprises\" that are easy to produce and improve.
        Also services can be \"mega-corporations\" constructed as the coordinated
        work of subordinate services. A mature rollout of SOA effectively defines
        the API of an organization.\n\nReasons for treating the implementation of
        services as separate projects from larger projects include:\n# Separation
        promotes the concept to the business that services can be delivered quickly
        and independently from the larger and slower-moving projects common in the
        organization. The business starts understanding systems and simplified user
        interfaces calling on services. This advocates [[agility]]. That is to say,
        it fosters business innovations and speeds up time-to-market.<ref>Brayan Zimmerli
        (November 11, 2009) [http://www.brayan.com/projects/BenefitsOfSOA/default.htm
        Business Benefits of SOA], ''''University of Applied Science of Northwestern
        Switzerland, School of Business''''</ref>\n# Separation promotes the decoupling
        of services from consuming projects. This encourages good design insofar as
        the service is designed without knowing who its consumers are.\n# Documentation
        and test artifacts of the service are not embedded within the detail of the
        larger project. This is important when the service needs to be reused later.\n\nSOA
        promises to simplify testing indirectly. Services are autonomous, stateless,
        with fully documented interfaces, and separate from the cross-cutting concerns
        of the implementation. If an organization possesses appropriately defined
        test data, then a corresponding stub is built that reacts to the test data
        when a service is being built. A full set of regression tests, scripts, data,
        and responses is also captured for the service. The service can be tested
        as a ''black box'' using existing stubs corresponding to the services it calls.
        Test environments can be constructed where the primitive and out-of-scope
        services are stubs, while the remainder of the mesh is test deployments of
        full services. As each interface is fully documented with its own full set
        of regression test documentation, it becomes simple to identify problems in
        test services. Testing evolves to merely validate that the test service operates
        according to its documentation, and finds gaps in documentation and test cases
        of all services within the environment. Managing the data state of [[idempotent]]
        services is the only complexity.\n\nExamples may prove useful to aid in documenting
        a service to the level where it becomes useful. The documentation of some
        APIs within the Java Community Process provide good examples. As these are
        exhaustive, staff would typically use only important subsets. The ''ossjsa.pdf''
        file within [[Java Platform, Standard Edition|JSR-89]] exemplifies such a
        file.<ref>[https://web.archive.org/web/20110726070810/https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=7854-oss_service_activation-1.0-fr-spec-oth-JSpec%40CDS-CDS_Developer
        JSR-000089 OSS Service Activation API Specification 1.0 Final Release]. sun.com</ref>\n\n==
        Criticism ==\nSOA has been conflated with [[Web service]]s;<ref>{{cite web|author=Joe
        McKendrick|title=Bray: SOA too complex; ''just vendor BS''|url=http://www.zdnet.com/blog/service-oriented/bray-soa-too-complex-just-vendor-bs/597|publisher=ZDNet}}</ref>
        however, Web services are only one option to implement the patterns that comprise
        the SOA style. In the absence of native or binary forms of remote procedure
        call (RPC), applications could run more slowly and require more processing
        power, increasing costs. Most implementations do incur these overheads, but
        SOA can be implemented using technologies (for example, [[Java Business Integration]]
        (JBI), [[Windows Communication Foundation]] (WCF) and [[data distribution
        service]] (DDS)) that do not depend on remote procedure calls or translation
        through XML. At the same time, emerging open-source XML parsing technologies
        (such as [[VTD-XML]]) and various XML-compatible binary formats promise to
        significantly improve SOA performance.  Services implemented using JSON instead
        of XML do not suffer from this performance concern.<ref>Jimmy Zhang (February
        20, 2008) [http://xml.sys-con.com/read/453082.htm \"Index XML Documents with
        VTD-XML\"]. ''''XML Journal''''.</ref><ref>Jimmy Zhang (August 5, 2008) [http://soa.sys-con.com/read/250512.htm
        \"i-Technology Viewpoint: The Performance Woe of Binary XML\"]. ''''Microservices
        Journal''''.</ref><ref>Jimmy Zhang (January 9, 2008)  [http://www.devx.com/xml/Article/36379
        \"Manipulate XML Content the Ximple Way\"]. ''''devx.com''''.</ref>\n\nStateful
        services require both the consumer and the provider to share the same consumer-specific
        context, which is either included in or referenced by messages exchanged between
        the provider and the consumer. This constraint has the drawback that it could
        reduce the overall [[scalability]] of the service provider if the service-provider
        needs to retain the shared context for each consumer. It also increases the
        coupling between a service provider and a consumer and makes switching service
        providers more difficult.<ref>{{cite web | url=http://www.jpmorgenthal.com/morgenthal/?p=31
        | title=The Reason SOA Isn\u2019t Delivering Sustainable Software | date=June
        19, 2009 | publisher=jpmorgenthal.com | accessdate=June 27, 2009 }}</ref>
        Ultimately, some critics feel that SOA services are still too constrained
        by applications they represent.<ref>{{cite web | url=http://www.zdnet.com/article/soa-services-still-too-constrained-by-applications-they-represent/
        | title=SOA services still too constrained by applications they represent
        | date=June 27, 2009 | publisher=zdnet.com | accessdate=June 27, 2009 }}</ref>\n\nA
        primary challenge faced by service-oriented architecture is managing of metadata.
        Environments based on SOA include many services which communicate among each
        other to perform tasks. Due to the fact that the design may involve multiple
        services working in conjunction, an Application may generate millions of messages.
        Further services may belong to different organizations or even competing firms
        creating a huge trust issue. Thus SOA governance comes into the scheme of
        things.<ref>{{Cite web|url=https://www.opengroup.org/soa/source-book/soa_refarch/governance.htm|title=Governance
        Layer|website=www.opengroup.org|access-date=2016-09-22}}</ref>\n\nAnother
        major problem faced by SOA is the lack of a uniform testing framework. There
        are no tools that provide the required features for testing these services
        in a service-oriented architecture. The major causes of difficulty are:<ref>{{Cite
        web|url=http://wso2.com/library/articles/2014/04/how-to-efficiently-test-service-oriented-architecture/|title=How
        to Efficiently Test Service Oriented Architecture {{!}} WSO2 Inc|website=wso2.com|access-date=2016-09-22}}</ref>\n*
        Heterogeneity and complexity of solution.\n* Huge set of testing combinations
        due to integration of autonomous services.\n* Inclusion of services from different
        and competing vendors.\n* [[Platform as a service|Platform]] is continuously
        changing due to availability of new features and services.\n\nSee <ref>http://drops.dagstuhl.de/opus/volltexte/2009/2046/pdf/09021_abstracts_collection.2046.pdf</ref>
        for additional challenges, partial solutions and research roadmap input regarding
        [[Service-oriented modeling|software service engineering]]\n\n== Extensions
        and variants ==\n\n=== Event-driven architectures ===\n{{Main|Event-driven
        architecture}}\n\n=== Web 2.0 ===\n[[Tim O''Reilly]] coined the term \"[[Web
        2.0]]\" to describe a perceived, quickly growing set of web-based applications.<ref>{{cite
        web |url=http://www.oreillynet.com/pub/a/oreilly/tim/news/2005/09/30/what-is-web-20.html
        |title=What Is Web 2.0 |accessdate=June 10, 2008 |publisher=Tim O''Reilly
        |date=September 30, 2005 }}</ref> A topic that has experienced extensive coverage
        involves the relationship between Web 2.0 and service-oriented architectures.{{Which|date=October
        2016}}\n\nSOA is the philosophy of encapsulating application logic in services
        with a uniformly defined interface and making these publicly available via
        discovery mechanisms. The notion of complexity-hiding and reuse, but also
        the concept of loosely coupling services has inspired researchers to elaborate
        on similarities between the two philosophies, SOA and Web 2.0, and their respective
        applications. Some argue Web 2.0 and SOA have significantly different elements
        and thus can not be regarded \"parallel philosophies\", whereas others consider
        the two concepts as complementary and regard Web 2.0 as the global SOA.<ref
        name=\"sch\">{{ cite journal | url=http://www.alexandria.unisg.ch/Publikationen/37270|
        title=Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services
        | accessdate=February 23, 2008 |author1=Christoph Schroth  |author2=Till Janner  |lastauthoramp=yes
        | publisher=IT Professional 9 (2007), Nr. 3, pp. 36\u201341, IEEE Computer
        Society | year=2007 }}</ref>\n\nThe philosophies of Web 2.0 and SOA serve
        different user needs and thus expose differences with respect to the design
        and also the technologies used in real-world applications. However, {{As of|2008|lc=y}},
        use-cases demonstrated the potential of combining technologies and principles
        of both Web 2.0 and SOA.<ref name=\"sch\" />\n\n=== Microservices ===\n{{main|Microservices}}\nMicroservices
        are a modern interpretation of service-oriented architectures used to build  [[Distributed
        computing|distributed software systems]]. Services in a microservice architecture<ref>{{cite
        web|title=Microservices: yesterday, today, and tomorrow|url=https://arxiv.org/pdf/1606.04036v1.pdf|accessdate=6
        July 2016}}</ref> are [[Process (computing)|processes]] that communicate with
        each other over the [[Computer network|network]] in order to fulfill a goal.
        These services use technology agnostic [[Communications protocol|protocols]],<ref
        name=\"martinfowler\">{{cite web|url= http://martinfowler.com/articles/microservices.html|title=
        Microservices|author= James Lewis and Martin Fowler}}</ref> which aid in encapsulating
        choice of language and frameworks, making their choice a concern internal
        to the service. Microservices are a new realisation and implementation approach
        to SOA, which have become popular since 2014 (and after the introduction of
        [[DevOps]]), and which also emphasize continuous deployment and other agile
        practices.<ref>{{Cite journal|last=Balalaie|first=A.|last2=Heydarnoori|first2=A.|last3=Jamshidi|first3=P.|date=2016-05-01|title=Microservices
        Architecture Enables DevOps: Migration to a Cloud-Native Architecture|url=http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7436659|journal=IEEE
        Software|volume=33|issue=3|pages=42\u201352|doi=10.1109/MS.2016.64|issn=0740-7459}}</ref>\n\nThere
        is no single commonly agreed definition of microservices. The following characteristics
        and principles can be found in the literature:\n* fine-grained interfaces
        (to independently deployable services), \n* business-driven development (e.g.
        domain-driven design), \n* IDEAL cloud application architectures, \n* polyglot
        programming and persistence, \n* lightweight container deployment, \n* decentralized
        continuous delivery, and \n* DevOps with holistic service monitoring.\n\n==
        See also ==\n* [[Loose coupling]]\n* [[OASIS SOA Reference Model]]\n* [[Service
        granularity principle]]\n* [[SOA governance]]\n* [[Software architecture]]\n*
        [[Service-oriented communications]] (SOC)\n\n== References ==\n{{reflist|30em}}\n\n==
        External links ==\n{{commons category}}\n{{Spoken Wikipedia|En-Service-oriented
        architecture.ogg|2011-10-27}}\n* [http://www.modelfutures.com/file_download/17/MOD+CIO+-+Service+Analysis+Report+-+v1.3.pdf
        A comparison of SOA standards carried out for [[Ministry of Defence (United
        Kingdom)]] in 2010]\n* [http://msdn.microsoft.com/en-us/library/bb833022.aspx
        SOA in the real world \u2013 Microsoft Developer network]\n* [http://www.ibm.com/developerworks/webservices/library/ws-soa-design1/
        SOA reference architecture from IBM]\n* [http://www.soablueprint.com/whitepapers/SOAPGPart2.pdf
        SOA Practitioners Guide Part 2: SOA Reference Architecture]\n* [http://discerntechnology.com/resources/eguides/service-oriented-architecture-case-study/1/
        SOA for Existing Applications - A Case Study]\n* Keen, M. et al.: [http://www.redbooks.ibm.com/redbooks/pdfs/sg246346.pdf
        Patterns: Implementing an SOA Using an Enterprise Service Bus], IBM Redbook,
        2004.\n* [https://www.w3.org/TR/ws-arch/ Web Services Architecture W3C Working
        Group Note 11 February 2004]\n\n{{Software engineering}}\n{{Authority control}}\n\n[[Category:Software
        design patterns]]\n[[Category:Architectural pattern (computer science)]]\n[[Category:Enterprise
        application integration]]\n[[Category:Service-oriented (business computing)]]\n[[Category:Web
        services]]"}]}}}}'
    http_version: 
  recorded_at: Sun, 22 Oct 2017 09:49:30 GMT
- request:
    method: get
    uri: https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&rvprop=content&titles=Service-oriented%20architecture
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - en.wikipedia.org
      User-Agent:
      - http.rb/3.0.0
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 22 Oct 2017 16:48:42 GMT
      Content-Type:
      - application/json; charset=utf-8
      Transfer-Encoding:
      - chunked
      Connection:
      - close
      Server:
      - mw1279.eqiad.wmnet
      X-Powered-By:
      - HHVM/3.18.6-dev
      X-Content-Type-Options:
      - nosniff
      Cache-Control:
      - private, must-revalidate, max-age=0
      P3p:
      - CP="This is not a P3P policy! See https://en.wikipedia.org/wiki/Special:CentralAutoLogin/P3P
        for more info."
      X-Frame-Options:
      - SAMEORIGIN
      Content-Disposition:
      - inline; filename="api-result.json"
      Vary:
      - Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization
      Backend-Timing:
      - D=34060 t=1508690922230851
      X-Varnish:
      - 21665371, 36283099, 198586909, 691522774
      Via:
      - 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      X-Cache:
      - cp1065 pass, cp2007 pass, cp4010 pass, cp4017 pass
      X-Cache-Status:
      - pass
      Strict-Transport-Security:
      - max-age=106384710; includeSubDomains; preload
      Set-Cookie:
      - GeoIP=US:CA:Mountain_View:37.42:-122.06:v4; Path=/; secure; Domain=.wikipedia.org
      - WMF-Last-Access-Global=22-Oct-2017;Path=/;Domain=.wikipedia.org;HttpOnly;secure;Expires=Thu,
        23 Nov 2017 12:00:00 GMT
      - WMF-Last-Access=22-Oct-2017;Path=/;HttpOnly;secure;Expires=Thu, 23 Nov 2017
        12:00:00 GMT
      X-Analytics:
      - ns=-1;special=Badtitle;https=1;nocookies=1
      X-Client-Ip:
      - 35.201.173.36
    body:
      encoding: UTF-8
      string: '{"batchcomplete":"","query":{"pages":{"666924":{"pageid":666924,"ns":0,"title":"Service-oriented
        architecture","revisions":[{"contentformat":"text/x-wiki","contentmodel":"wikitext","*":"{{Use
        mdy dates|date=April 2015}}\nA ''''''service-oriented architecture'''''' (''''''SOA'''''')
        is a style of software design where services are provided to the other components
        by [[application components]], through a [[Communications protocol|communication
        protocol]] over a network. The basic principles of service-oriented architecture
        are independent of vendors, products and technologies.<ref>{{Cite web|url=https://msdn.microsoft.com/en-us/library/bb833022.aspx|title=Chapter
        1: Service Oriented Architecture (SOA)|website=msdn.microsoft.com|access-date=2016-09-21}}</ref>\nA
        service is a discrete unit of functionality that can be accessed remotely
        and acted upon and updated independently, such as retrieving a credit card
        statement online.\n\nA service has four properties according to one of many
        definitions of SOA:<ref>http://www.opengroup.org/standards/soa</ref>\n# It
        logically represents a business activity with a specified outcome.\n# It is
        self-contained.\n# It is a [[black box]] for its consumers.\n# It may consist
        of other underlying services.<ref>{{Cite web|url=http://www.opengroup.org/soa/source-book/soa/soa.htm|title=What
        Is SOA?|website=www.opengroup.org|access-date=2016-09-21}}</ref>\n\nDifferent
        services can be used in conjunction to provide the functionality of a large
        [[Software applications|software application]].<ref>{{Cite book|title=Cloud
        Computing: A Practical Approach|last=Velte|first=Anthony T.|publisher=McGraw
        Hill|year=2010|isbn=978-0-07-162694-1|location=|pages=|via=}}</ref> So far,
        the definition could be a definition of modular programming in the 1970s.
        Service-oriented architecture is less about how to modularize an application,
        and more about how to compose an application by integration of distributed,
        separately-maintained and deployed software components. It is enabled by technologies
        and standards that make it easier for components to communicate and cooperate
        over a network, especially an IP network.\n\n== Overview ==\nIn SOA, services
        use protocols that describe how they [[Message passing|pass]] and parse messages
        using description [[metadata]]. This metadata describes both the functional
        characteristics of the service and quality-of-service characteristics. Service-oriented
        architecture aims to allow users to combine large chunks of functionality
        to form applications which are built purely from existing services and combining
        them in an ad hoc manner. A service presents a simple interface to the requester
        that abstracts away the underlying complexity acting as a black box. Further
        users can also access these independent services without any knowledge of
        their internal implementation.<ref>{{Cite web|url=http://www-128.ibm.com/developerworks/library/ws-migratesoa/
        |title=Migrating to a service-oriented architecture, Part 1 |date=2008-12-09
        |access-date=2016-09-21 |deadurl=bot: unknown |archiveurl=https://web.archive.org/web/20081209120916/http://www-128.ibm.com/developerworks/library/ws-migratesoa/
        |archivedate=December 9, 2008 |df= }}</ref>\n\n== Defining concepts ==\nThe
        related buzzword [[service-orientation]] promotes ''''[[loose coupling]]''''
        between services. SOA separates functions into distinct units, or services,<ref
        name=\"Bell\">{{cite book|title=Service-Oriented Modeling: Service Analysis,
        Design, and Architecture|publisher=Wiley & Sons|year=2008|isbn=978-0-470-14111-3|page=3|chapter=Introduction
        to Service-Oriented Modeling|author=Michael Bell}}</ref> which developers
        make accessible over a network in order to allow users to combine and reuse
        them in the production of applications. These services and their corresponding
        consumers communicate with each other by passing data in a well-defined, shared
        format, or by coordinating an activity between two or more services.<ref name=\"Bell_\">{{
        cite book |author=Michael Bell|title=SOA Modeling Patterns for Service-Oriented
        Discovery and Analysis |year=2010 |publisher=Wiley & Sons|isbn=978-0-470-48197-4
        |page=390 }}</ref>\n\nA manifesto was published for service-oriented architecture
        in October, 2009. This came up with six core values which are listed as follows:<ref>{{Cite
        web|url=http://www.soa-manifesto.org/|title=SOA Manifesto|website=www.soa-manifesto.org|access-date=2016-09-21}}</ref>\n#
        ''''''Business value'''''' is given more importance than technical strategy.\n#
        ''''''Strategic goals'''''' are given more importance than project-specific
        benefits.\n# ''''''Intrinsic inter-operability'''''' is given more importance
        than custom integration.\n# ''''''Shared services'''''' are given more importance
        than specific-purpose implementations.\n# ''''''Flexibility'''''' is given
        more importance than optimization.\n# ''''''Evolutionary refinement''''''
        is given more importance than pursuit of initial perfection.\n\nSOA can be
        seen as part of the continuum which ranges from the older concept of [[distributed
        computing]]<ref name=\"Bell\" /><ref name=\"Erl\">Thomas Erl (June 2005).
        ''''About the Principles''''. Serviceorientation.org</ref> and [[modular programming]],
        through SOA, and on to current practices of [[Mashup (web application hybrid)|mashup]]s,
        [[SaaS]], and [[cloud computing]] (which some see as the offspring of SOA).<ref>{{cite
        web|url=http://apsblog.burtongroup.com/2009/01/soa-is-dead-long-live-services.html
        |title=Application Platform Strategies Blog: SOA is Dead; Long Live Services
        |publisher=Apsblog.burtongroup.com |date=January 5, 2009 |accessdate=August
        13, 2012 }}</ref>\n\n== Principles ==\nThere are no industry standards relating
        to the exact composition of a service-oriented architecture, although many
        industry sources have published their own principles.  Some of these<ref>Yvonne
        Balzer [http://www-128.ibm.com/developerworks/webservices/library/ws-improvesoa/
        Improve your SOA project plans], ''''IBM'''', July 16, 2004</ref><ref>{{cite
        web |url= http://msdn.microsoft.com/en-us/library/bb972954.aspx |title=Principles
        of Service Oriented Design |author=Microsoft Windows Communication Foundation
        team |work=msdn.microsoft.com |year=2012 |accessdate=September 3, 2012}}</ref><ref
        name=\"Terl\">Principles by [[Thomas Erl]] of SOA Systems Inc. [http://soaprinciples.com
        eight specific service-orientation principles]</ref><ref>{{cite book|author=M.
        Hadi Valipour|title= 2009 2nd IEEE International Conference on Computer Science
        and Information Technology|author2= Bavar AmirZafari|author3= Kh. Niki Maleki|author4=
        Negin Daneshpour|doi=10.1109/ICCSIT.2009.5235004 |pages=34\u201338|chapter=
        A brief survey of software architecture concepts and service oriented architecture|year=
        2009|isbn= 978-1-4244-4519-6}}</ref>\ninclude the following:\n; [[Standardized
        service contract]]\n: Services adhere to a standard communications agreements,
        as defined collectively by one or more service-description documents within
        a given set of services.\n; Service reference autonomy (an aspect of loose
        coupling)\n: The relationship between services is minimized to the level that
        they are only aware of their existence.\n; Service location transparency (an
        aspect of loose coupling)\n: Services can be called from anywhere within the
        network that it is located no matter where it is present.\n; Service longevity\n:
        Services should be designed to be long lived. Where possible services should
        avoid forcing consumers to change if they do not require new features, if
        you call a service today you should be able to call the same service tomorrow.\n;
        [[Service abstraction]]\n: The services act as black boxes, that is their
        inner logic is hidden from the consumers.\n; [[Service autonomy principle|Service
        autonomy]]\n: Services are independent and control the functionality they
        encapsulate, from a Design-time and a run-time perspective.\n; [[Service statelessness
        principle|Service statelessness]]\n: Services are stateless, that is either
        return the requested value or give an exception hence minimizing resource
        use.\n; [[Service granularity principle|Service granularity]]\n: A principle
        to ensure services have an adequate size and scope. The functionality provided
        by the service to the user must be relevant. \n; Service normalization\n:
        Services are decomposed or consolidated (normalized) to minimize redundancy.
        In some, this may not be done, These are the cases where performance optimization,
        access, and aggregation are required.<ref>{{cite book|author=Tony Shan|title=IEEE
        International Conference on ''''Services'''' Computing, 2004. (SCC 2004).
        Proceedings. 2004 |doi=10.1109/SCC.2004.1358011 |pages=237\u2013244|year=2004|chapter=Building
        a service-oriented e ''''Banking'''' platform |isbn=0-7695-2225-4 }}2004</ref>\n;
        [[Service composability principle|Service composability]]\n: Services can
        be used to compose other services.\n; [[Service discovery]]\n: Services are
        supplemented with communicative meta data by which they can be effectively
        discovered and interpreted.\n; [[Service reusability principle|Service reusability]]\n:
        Logic is divided into various services, to promote reuse of code.\n; Service
        [[Encapsulation (computer science)|encapsulation]]\n: Many services which
        were not initially planned under SOA, may get encapsulated or become a part
        of SOA.\n\n== Patterns ==\nEach SOA building block can play any of the three
        roles:\n\n; Service provider\n: It creates a web service and provides its
        information to the service registry. Each provider debates upon a lot of hows
        and whys like which service to expose, whom to give more importance: security
        or easy availability, what price to offer the service for and many more''''.''''
        The provider also has to decide what category the service should be listed
        in for a given broker service<ref>{{cite web|url=http://ieeexplore.ieee.org/document/6928915/|title=Exploring
        Cloud Service Brokering from an Interface Perspective|last1=Duan |first1=Yucong
        |last2=Narendra |first2= Nanjangud |last3=Du |first3=Wencai |last4=Wang |first4=Yongzhi
        |last5=Zhou|first5=Nianjun|publisher=[[IEEE]]}}</ref> and what sort of trading
        partner agreements are required to use the service.\n; Service broker, service
        registry or service repository\n: Its main functionality is to make the information
        regarding the web service available to any potential requester. Whoever implements
        the broker decides the scope of the broker. Public brokers are available anywhere
        and everywhere but private brokers are only available to a limited amount
        of public. UDDI was an early, no longer actively supported attempt to provide
        [[Web Services Discovery|Web services discovery]].\n; Service requester/consumer\n:
        It locates entries in the broker registry using various find operations and
        then binds to the service provider in order to invoke one of its web services.
        Whichever service the service-consumers need, they have to take it into the
        brokers, bind it with respective service and then use it. They can access
        multiple services if the service provides multiple services.\n\nThe service
        consumer\u2013provider relationship is governed by a [[standardized service
        contract]],<ref>{{cite web |url=http://ieeexplore.ieee.org/document/6299375/|title=A
        Survey on Service Contract |last1=Duan |first1=Yucong |publisher=[[IEEE]]}}</ref>
        which has a business part, a functional part and a technical part.\n\n[[Service
        composability principle|Service composition patterns]] have two broad, high-level
        architectural styles: [[Service choreography#Service choreography and service
        orchestration|choreography and orchestration]]. Lower level enterprise integration
        patterns that are not bound to a particular architectural style continue to
        be relevant and eligible in SOA design.<ref name=\"ieeesweip\">{{Cite journal
        | url = http://ieeexplore.ieee.org/document/7368007/ | doi = 10.1109/MS.2016.11
        | title = A Decade of Enterprise Integration Patterns | journal = IEEE Software
        | volume = 33 | issue = 1 | pages =  13\u201319 | year = 2016 | last1 = Olaf
        Zimmermann, Cesare Pautasso, Gregor Hohpe, Bobby Woolf | first1 = }}</ref><ref>{{Cite
        book | last=Rotem-Gal-Oz | first=Arnon | title= SOA Patterns | publisher=
        Manning Publications | year=2012 | location= | isbn=978-1933988269 }}</ref><ref>K.
        Julisch et al., [http://soadecisions.org/download/ComplianceByDesign-AAM.pdf
        Compliance by Design \u2013 Bridging the Chasm between Auditors and IT Architects].
        Computers & Security, Elsevier. Volume 30, Issue 6-7, Sep.-Oct. 2011.</ref>\n\n==
        Implementation approaches ==\nService-oriented architecture can be implemented
        with [[Web service]]s.<ref>Brandner, M., Craes, M., Oellermann, F., Zimmermann,
        O., Web Services-Oriented Architecture in Production in the Finance Industry,
        Informatik-Spektrum 02/2004, Springer-Verlag, 2004</ref> This is done to make
        the functional building-blocks accessible over standard Internet protocols
        that are independent of platforms and programming languages. These services
        can represent either new applications or just wrappers around existing legacy
        systems to make them network-enabled.<ref>{{Cite web|url=http://www.ibm.com/support/knowledgecenter/en/SSEQTP_6.1.0/com.ibm.websphere.base.iseries.doc/info/iseries/ae/cwbs_soawbs.html|title=www.ibm.com|access-date=2016-09-10}}</ref>\n\nImplementers
        commonly build SOAs using web services standards. One example is [[SOAP]],
        which has gained broad industry acceptance after recommendation of Version
        1.2 from the W3C<ref>{{cite web|url=http://www.w3.org/2003/06/soap12-pressrelease
        |title=SOAP Version 1.2 \u306e\u516c\u958b\u306b\u3064\u3044\u3066 (W3C \u52e7\u544a)
        |language=ja |publisher=W3.org |accessdate=August 13, 2012 }}</ref> (World
        Wide Web Consortium) in 2003. These standards (also referred to as [[List
        of web service specifications|web service specifications]]) also provide greater
        interoperability and some protection from lock-in to proprietary vendor software.
        One can, however, also implement SOA using any other service-based technology,
        such as [[Jini]], [[CORBA]] or [[Representational State Transfer|REST]].\n\nArchitectures
        can operate independently of specific technologies and can therefore be implemented
        using a wide range of technologies, including:\n* [[Web services]] based on
        WSDL and [[SOAP]]\n* Messaging, e.g., with ActiveMQ, JMS, RabbitMQ\n* RESTful
        HTTP, with [[Representational state transfer]] (REST) constituting its own
        constraints-based architectural style\n* [[OPC Unified Architecture|OPC-UA]]\n*
        [[Windows Communication Foundation|WCF]] (Microsoft''s implementation of Web
        services, forming a part of WCF)\n* [[Apache Thrift]]\n* [[SORCER]]\n\nImplementations
        can use one or more of these protocols and, for example, might use a file-system
        mechanism to communicate data following a defined interface specification
        between processes conforming to the SOA concept. The key is independent services
        with defined interfaces that can be called to perform their tasks in a standard
        way, without a service having foreknowledge of the calling application, and
        without the application having or needing knowledge of how the service actually
        performs its tasks. SOA enables the development of applications that are built
        by combining loosely coupled and [[interoperable]] services.\n\nThese services
        inter-operate based on a formal definition (or contract, e.g., WSDL) that
        is independent of the underlying platform and programming language. The interface
        definition [[Information hiding|hides the implementation]] of the language-specific
        service. SOA-based systems can therefore function independently of development
        technologies and platforms (such as Java, .NET, etc.). Services written in
        C# running on .NET platforms and services written in Java running on [[Java
        Platform, Enterprise Edition|Java EE]] platforms, for example, can both be
        consumed by a common composite application (or client). Applications running
        on either platform can also consume services running on the other as web services
        that facilitate reuse. Managed environments can also wrap COBOL legacy systems
        and present them as software services.<sup>[[Service-oriented architecture#cite
        note-23|.]]</sup><ref>{{Cite web|url=http://www.fujitsu.com/global/documents/about/resources/publications/fstj/archives/vol42-3/paper18.pdf|title=.
        \"Case Study of System Architecture that use COBOL assets\"|last=Okishima|first=Haruhiru|date=2006|website=|publisher=|access-date=}}</ref>\n\n[[High-level
        programming language]]s such as [[BPEL]] and specifications such as [[WS-CDL]]
        and [[WS-Coordination]] extend the service concept by providing a method of
        defining and supporting orchestration of fine-grained services into more coarse-grained
        business services, which architects can in turn incorporate into workflows
        and business processes implemented in [[composite applications]] or [[Enterprise
        portal|portals]]<ref>{{Cite journal|last=Kyriazis|first=Dimosthenis|last2=Tserpes|first2=Konstantinos|last3=Menychtas|first3=Andreas|last4=Sarantidis|first4=Ioannis|last5=Varvarigou|first5=Theodora|date=2009-04-25|title=Service
        selection and workflow mapping for Grids: an approach exploiting quality-of-service
        information|url=http://onlinelibrary.wiley.com/doi/10.1002/cpe.1343/abstract|journal=Concurrency
        and Computation: Practice and Experience|language=en|volume=21|issue=6|pages=739\u2013766|doi=10.1002/cpe.1343|issn=1532-0634}}</ref>\n\n[[Service-oriented
        modeling]] is an SOA framework that identifies the various disciplines that
        guide SOA practitioners to conceptualize, analyze, design, and architect their
        service-oriented assets. The [[Service-oriented modeling#Service-oriented
        modeling framework|Service-oriented modeling framework (SOMF)]] offers a modeling
        language and a work structure or \"map\" depicting the various components
        that contribute to a successful service-oriented modeling approach. It illustrates
        the major elements that identify the \"what to do\" aspects of a service development
        scheme. The model enables practitioners to craft a [[project plan]] and to
        identify the milestones of a service-oriented initiative. SOMF also provides
        a common modeling notation to address alignment between business and IT organizations.[[File:SOA
        Elements.png|thumb|450px|right|Elements of SOA, by Dirk Krafzig, Karl Banke,
        and Dirk Slama<ref>''''Enterprise SOA''''. Prentice Hall, 2005</ref>]]\n[[File:SOA
        Metamodel.svg|thumb|450px|right|SOA meta-model, The Linthicum Group, 2007]]\n\n==
        Organizational benefits ==\nSome [[enterprise architect]]s believe that SOA
        can help businesses respond more quickly and more cost-effectively to changing
        market conditions.<ref>Christopher Koch [http://www.cio.com.au/index.php/id;1350140708
        A New Blueprint For The Enterprise], ''''CIO Magazine'''', March 1, 2005</ref>
        This style of ''''architecture'''' promotes reuse at the macro (service) level
        rather than micro (classes) level. It can also simplify interconnection to\u2014and
        usage of\u2014existing IT (legacy) assets.\n\nWith SOA, the idea is that an
        organization can look at a problem holistically. A business has more overall
        control. Theoretically there would not be a mass of developers using whatever
        tool sets might please them. But rather they would be coding to a standard
        that is set within the business. They can also develop enterprise-wide SOA
        that encapsulates a business-oriented infrastructure. SOA has also been illustrated
        as a highway system providing efficiency for car drivers. The point being
        that if everyone had a car, but there was no highway anywhere, things would
        be limited and disorganized, in any attempt to get anywhere quickly or efficiently.
        IBM Vice President of Web Services Michael Liebow says that SOA \"builds highways\".<ref>Elizabeth
        Millard (January 2005). \"Building a Better Process\". ''''Computer User''''.
        Page 20.</ref>\n\nIn some respects, SOA could be regarded as an architectural
        evolution rather than as a revolution. It captures many of the [[best practice]]s
        of previous software architectures. In communications systems, for example,
        little development of solutions that use truly static bindings to talk to
        other equipment in the network has taken place. By embracing a SOA approach,
        such systems can position themselves to stress the importance of well-defined,
        highly inter-operable interfaces. Other predecessors of SOA include [[Component-based
        software engineering]] and Object-Oriented Analysis and Design (OOAD) of remote
        objects, for instance, in [[CORBA]].\n\nA service comprises a stand-alone
        unit of functionality available only via a formally defined interface. Services
        can be some kind of \"nano-enterprises\" that are easy to produce and improve.
        Also services can be \"mega-corporations\" constructed as the coordinated
        work of subordinate services. A mature rollout of SOA effectively defines
        the API of an organization.\n\nReasons for treating the implementation of
        services as separate projects from larger projects include:\n# Separation
        promotes the concept to the business that services can be delivered quickly
        and independently from the larger and slower-moving projects common in the
        organization. The business starts understanding systems and simplified user
        interfaces calling on services. This advocates [[agility]]. That is to say,
        it fosters business innovations and speeds up time-to-market.<ref>Brayan Zimmerli
        (November 11, 2009) [http://www.brayan.com/projects/BenefitsOfSOA/default.htm
        Business Benefits of SOA], ''''University of Applied Science of Northwestern
        Switzerland, School of Business''''</ref>\n# Separation promotes the decoupling
        of services from consuming projects. This encourages good design insofar as
        the service is designed without knowing who its consumers are.\n# Documentation
        and test artifacts of the service are not embedded within the detail of the
        larger project. This is important when the service needs to be reused later.\n\nSOA
        promises to simplify testing indirectly. Services are autonomous, stateless,
        with fully documented interfaces, and separate from the cross-cutting concerns
        of the implementation. If an organization possesses appropriately defined
        test data, then a corresponding stub is built that reacts to the test data
        when a service is being built. A full set of regression tests, scripts, data,
        and responses is also captured for the service. The service can be tested
        as a ''black box'' using existing stubs corresponding to the services it calls.
        Test environments can be constructed where the primitive and out-of-scope
        services are stubs, while the remainder of the mesh is test deployments of
        full services. As each interface is fully documented with its own full set
        of regression test documentation, it becomes simple to identify problems in
        test services. Testing evolves to merely validate that the test service operates
        according to its documentation, and finds gaps in documentation and test cases
        of all services within the environment. Managing the data state of [[idempotent]]
        services is the only complexity.\n\nExamples may prove useful to aid in documenting
        a service to the level where it becomes useful. The documentation of some
        APIs within the Java Community Process provide good examples. As these are
        exhaustive, staff would typically use only important subsets. The ''ossjsa.pdf''
        file within [[Java Platform, Standard Edition|JSR-89]] exemplifies such a
        file.<ref>[https://web.archive.org/web/20110726070810/https://cds.sun.com/is-bin/INTERSHOP.enfinity/WFS/CDS-CDS_Developer-Site/en_US/-/USD/ViewProductDetail-Start?ProductRef=7854-oss_service_activation-1.0-fr-spec-oth-JSpec%40CDS-CDS_Developer
        JSR-000089 OSS Service Activation API Specification 1.0 Final Release]. sun.com</ref>\n\n==
        Criticism ==\nSOA has been conflated with [[Web service]]s;<ref>{{cite web|author=Joe
        McKendrick|title=Bray: SOA too complex; ''just vendor BS''|url=http://www.zdnet.com/blog/service-oriented/bray-soa-too-complex-just-vendor-bs/597|publisher=ZDNet}}</ref>
        however, Web services are only one option to implement the patterns that comprise
        the SOA style. In the absence of native or binary forms of remote procedure
        call (RPC), applications could run more slowly and require more processing
        power, increasing costs. Most implementations do incur these overheads, but
        SOA can be implemented using technologies (for example, [[Java Business Integration]]
        (JBI), [[Windows Communication Foundation]] (WCF) and [[data distribution
        service]] (DDS)) that do not depend on remote procedure calls or translation
        through XML. At the same time, emerging open-source XML parsing technologies
        (such as [[VTD-XML]]) and various XML-compatible binary formats promise to
        significantly improve SOA performance.  Services implemented using JSON instead
        of XML do not suffer from this performance concern.<ref>Jimmy Zhang (February
        20, 2008) [http://xml.sys-con.com/read/453082.htm \"Index XML Documents with
        VTD-XML\"]. ''''XML Journal''''.</ref><ref>Jimmy Zhang (August 5, 2008) [http://soa.sys-con.com/read/250512.htm
        \"i-Technology Viewpoint: The Performance Woe of Binary XML\"]. ''''Microservices
        Journal''''.</ref><ref>Jimmy Zhang (January 9, 2008)  [http://www.devx.com/xml/Article/36379
        \"Manipulate XML Content the Ximple Way\"]. ''''devx.com''''.</ref>\n\nStateful
        services require both the consumer and the provider to share the same consumer-specific
        context, which is either included in or referenced by messages exchanged between
        the provider and the consumer. This constraint has the drawback that it could
        reduce the overall [[scalability]] of the service provider if the service-provider
        needs to retain the shared context for each consumer. It also increases the
        coupling between a service provider and a consumer and makes switching service
        providers more difficult.<ref>{{cite web | url=http://www.jpmorgenthal.com/morgenthal/?p=31
        | title=The Reason SOA Isn\u2019t Delivering Sustainable Software | date=June
        19, 2009 | publisher=jpmorgenthal.com | accessdate=June 27, 2009 }}</ref>
        Ultimately, some critics feel that SOA services are still too constrained
        by applications they represent.<ref>{{cite web | url=http://www.zdnet.com/article/soa-services-still-too-constrained-by-applications-they-represent/
        | title=SOA services still too constrained by applications they represent
        | date=June 27, 2009 | publisher=zdnet.com | accessdate=June 27, 2009 }}</ref>\n\nA
        primary challenge faced by service-oriented architecture is managing of metadata.
        Environments based on SOA include many services which communicate among each
        other to perform tasks. Due to the fact that the design may involve multiple
        services working in conjunction, an Application may generate millions of messages.
        Further services may belong to different organizations or even competing firms
        creating a huge trust issue. Thus SOA governance comes into the scheme of
        things.<ref>{{Cite web|url=https://www.opengroup.org/soa/source-book/soa_refarch/governance.htm|title=Governance
        Layer|website=www.opengroup.org|access-date=2016-09-22}}</ref>\n\nAnother
        major problem faced by SOA is the lack of a uniform testing framework. There
        are no tools that provide the required features for testing these services
        in a service-oriented architecture. The major causes of difficulty are:<ref>{{Cite
        web|url=http://wso2.com/library/articles/2014/04/how-to-efficiently-test-service-oriented-architecture/|title=How
        to Efficiently Test Service Oriented Architecture {{!}} WSO2 Inc|website=wso2.com|access-date=2016-09-22}}</ref>\n*
        Heterogeneity and complexity of solution.\n* Huge set of testing combinations
        due to integration of autonomous services.\n* Inclusion of services from different
        and competing vendors.\n* [[Platform as a service|Platform]] is continuously
        changing due to availability of new features and services.\n\nSee <ref>http://drops.dagstuhl.de/opus/volltexte/2009/2046/pdf/09021_abstracts_collection.2046.pdf</ref>
        for additional challenges, partial solutions and research roadmap input regarding
        [[Service-oriented modeling|software service engineering]]\n\n== Extensions
        and variants ==\n\n=== Event-driven architectures ===\n{{Main|Event-driven
        architecture}}\n\n=== Web 2.0 ===\n[[Tim O''Reilly]] coined the term \"[[Web
        2.0]]\" to describe a perceived, quickly growing set of web-based applications.<ref>{{cite
        web |url=http://www.oreillynet.com/pub/a/oreilly/tim/news/2005/09/30/what-is-web-20.html
        |title=What Is Web 2.0 |accessdate=June 10, 2008 |publisher=Tim O''Reilly
        |date=September 30, 2005 }}</ref> A topic that has experienced extensive coverage
        involves the relationship between Web 2.0 and service-oriented architectures.{{Which|date=October
        2016}}\n\nSOA is the philosophy of encapsulating application logic in services
        with a uniformly defined interface and making these publicly available via
        discovery mechanisms. The notion of complexity-hiding and reuse, but also
        the concept of loosely coupling services has inspired researchers to elaborate
        on similarities between the two philosophies, SOA and Web 2.0, and their respective
        applications. Some argue Web 2.0 and SOA have significantly different elements
        and thus can not be regarded \"parallel philosophies\", whereas others consider
        the two concepts as complementary and regard Web 2.0 as the global SOA.<ref
        name=\"sch\">{{ cite journal | url=http://www.alexandria.unisg.ch/Publikationen/37270|
        title=Web 2.0 and SOA: Converging Concepts Enabling the Internet of Services
        | accessdate=February 23, 2008 |author1=Christoph Schroth  |author2=Till Janner  |lastauthoramp=yes
        | publisher=IT Professional 9 (2007), Nr. 3, pp. 36\u201341, IEEE Computer
        Society | year=2007 }}</ref>\n\nThe philosophies of Web 2.0 and SOA serve
        different user needs and thus expose differences with respect to the design
        and also the technologies used in real-world applications. However, {{As of|2008|lc=y}},
        use-cases demonstrated the potential of combining technologies and principles
        of both Web 2.0 and SOA.<ref name=\"sch\" />\n\n=== Microservices ===\n{{main|Microservices}}\nMicroservices
        are a modern interpretation of service-oriented architectures used to build  [[Distributed
        computing|distributed software systems]]. Services in a microservice architecture<ref>{{cite
        web|title=Microservices: yesterday, today, and tomorrow|url=https://arxiv.org/pdf/1606.04036v1.pdf|accessdate=6
        July 2016}}</ref> are [[Process (computing)|processes]] that communicate with
        each other over the [[Computer network|network]] in order to fulfill a goal.
        These services use technology agnostic [[Communications protocol|protocols]],<ref
        name=\"martinfowler\">{{cite web|url= http://martinfowler.com/articles/microservices.html|title=
        Microservices|author= James Lewis and Martin Fowler}}</ref> which aid in encapsulating
        choice of language and frameworks, making their choice a concern internal
        to the service. Microservices are a new realisation and implementation approach
        to SOA, which have become popular since 2014 (and after the introduction of
        [[DevOps]]), and which also emphasize continuous deployment and other agile
        practices.<ref>{{Cite journal|last=Balalaie|first=A.|last2=Heydarnoori|first2=A.|last3=Jamshidi|first3=P.|date=2016-05-01|title=Microservices
        Architecture Enables DevOps: Migration to a Cloud-Native Architecture|url=http://ieeexplore.ieee.org/lpdocs/epic03/wrapper.htm?arnumber=7436659|journal=IEEE
        Software|volume=33|issue=3|pages=42\u201352|doi=10.1109/MS.2016.64|issn=0740-7459}}</ref>\n\nThere
        is no single commonly agreed definition of microservices. The following characteristics
        and principles can be found in the literature:\n* fine-grained interfaces
        (to independently deployable services), \n* business-driven development (e.g.
        domain-driven design), \n* IDEAL cloud application architectures, \n* polyglot
        programming and persistence, \n* lightweight container deployment, \n* decentralized
        continuous delivery, and \n* DevOps with holistic service monitoring.\n\n==
        See also ==\n* [[Loose coupling]]\n* [[OASIS SOA Reference Model]]\n* [[Service
        granularity principle]]\n* [[SOA governance]]\n* [[Software architecture]]\n*
        [[Service-oriented communications]] (SOC)\n\n== References ==\n{{reflist|30em}}\n\n==
        External links ==\n{{commons category}}\n{{Spoken Wikipedia|En-Service-oriented
        architecture.ogg|2011-10-27}}\n* [http://www.modelfutures.com/file_download/17/MOD+CIO+-+Service+Analysis+Report+-+v1.3.pdf
        A comparison of SOA standards carried out for [[Ministry of Defence (United
        Kingdom)]] in 2010]\n* [http://msdn.microsoft.com/en-us/library/bb833022.aspx
        SOA in the real world \u2013 Microsoft Developer network]\n* [http://www.ibm.com/developerworks/webservices/library/ws-soa-design1/
        SOA reference architecture from IBM]\n* [http://www.soablueprint.com/whitepapers/SOAPGPart2.pdf
        SOA Practitioners Guide Part 2: SOA Reference Architecture]\n* [http://discerntechnology.com/resources/eguides/service-oriented-architecture-case-study/1/
        SOA for Existing Applications - A Case Study]\n* Keen, M. et al.: [http://www.redbooks.ibm.com/redbooks/pdfs/sg246346.pdf
        Patterns: Implementing an SOA Using an Enterprise Service Bus], IBM Redbook,
        2004.\n* [https://www.w3.org/TR/ws-arch/ Web Services Architecture W3C Working
        Group Note 11 February 2004]\n\n{{Software engineering}}\n{{Authority control}}\n\n[[Category:Software
        design patterns]]\n[[Category:Architectural pattern (computer science)]]\n[[Category:Enterprise
        application integration]]\n[[Category:Service-oriented (business computing)]]\n[[Category:Web
        services]]"}]}}}}'
    http_version: 
  recorded_at: Sun, 22 Oct 2017 16:48:42 GMT
- request:
    method: get
    uri: https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&rvprop=content&titles=dfhsjlk
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - en.wikipedia.org
      User-Agent:
      - http.rb/3.0.0
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 22 Oct 2017 16:48:43 GMT
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '134'
      Connection:
      - close
      Server:
      - mw1192.eqiad.wmnet
      X-Powered-By:
      - HHVM/3.18.6-dev
      X-Content-Type-Options:
      - nosniff
      Cache-Control:
      - private, must-revalidate, max-age=0
      P3p:
      - CP="This is not a P3P policy! See https://en.wikipedia.org/wiki/Special:CentralAutoLogin/P3P
        for more info."
      X-Frame-Options:
      - SAMEORIGIN
      Content-Disposition:
      - inline; filename="api-result.json"
      Vary:
      - Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization
      Backend-Timing:
      - D=38757 t=1508690923096528
      X-Varnish:
      - 163513065, 50535958, 219507829, 679737475
      Via:
      - 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      X-Cache:
      - cp1054 pass, cp2013 pass, cp4028 pass, cp4017 pass
      X-Cache-Status:
      - pass
      Strict-Transport-Security:
      - max-age=106384710; includeSubDomains; preload
      Set-Cookie:
      - GeoIP=US:CA:Mountain_View:37.42:-122.06:v4; Path=/; secure; Domain=.wikipedia.org
      - WMF-Last-Access-Global=22-Oct-2017;Path=/;Domain=.wikipedia.org;HttpOnly;secure;Expires=Thu,
        23 Nov 2017 12:00:00 GMT
      - WMF-Last-Access=22-Oct-2017;Path=/;HttpOnly;secure;Expires=Thu, 23 Nov 2017
        12:00:00 GMT
      X-Analytics:
      - ns=-1;special=Badtitle;https=1;nocookies=1
      X-Client-Ip:
      - 35.201.173.36
    body:
      encoding: UTF-8
      string: '{"batchcomplete":"","query":{"normalized":[{"from":"dfhsjlk","to":"Dfhsjlk"}],"pages":{"-1":{"ns":0,"title":"Dfhsjlk","missing":""}}}}'
    http_version: 
  recorded_at: Sun, 22 Oct 2017 16:48:43 GMT
- request:
    method: get
    uri: https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&rvprop=content&titles=dfhsjlk?
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - en.wikipedia.org
      User-Agent:
      - http.rb/3.0.0
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 22 Oct 2017 16:51:37 GMT
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '137'
      Connection:
      - close
      Server:
      - mw1313.eqiad.wmnet
      X-Powered-By:
      - HHVM/3.18.6-dev
      X-Content-Type-Options:
      - nosniff
      Cache-Control:
      - private, must-revalidate, max-age=0
      P3p:
      - CP="This is not a P3P policy! See https://en.wikipedia.org/wiki/Special:CentralAutoLogin/P3P
        for more info."
      X-Frame-Options:
      - SAMEORIGIN
      Content-Disposition:
      - inline; filename="api-result.json"
      Vary:
      - Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization
      Backend-Timing:
      - D=39314 t=1508691097775960
      X-Varnish:
      - 564432673, 961723471, 184171752, 685653742
      Via:
      - 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      X-Cache:
      - cp1055 pass, cp2016 pass, cp4010 pass, cp4017 pass
      X-Cache-Status:
      - pass
      Strict-Transport-Security:
      - max-age=106384710; includeSubDomains; preload
      Set-Cookie:
      - GeoIP=US:CA:Mountain_View:37.42:-122.06:v4; Path=/; secure; Domain=.wikipedia.org
      - WMF-Last-Access-Global=22-Oct-2017;Path=/;Domain=.wikipedia.org;HttpOnly;secure;Expires=Thu,
        23 Nov 2017 12:00:00 GMT
      - WMF-Last-Access=22-Oct-2017;Path=/;HttpOnly;secure;Expires=Thu, 23 Nov 2017
        12:00:00 GMT
      X-Analytics:
      - ns=-1;special=Badtitle;https=1;nocookies=1
      X-Client-Ip:
      - 35.201.173.36
    body:
      encoding: UTF-8
      string: '{"batchcomplete":"","query":{"normalized":[{"from":"dfhsjlk?","to":"Dfhsjlk?"}],"pages":{"-1":{"ns":0,"title":"Dfhsjlk?","missing":""}}}}'
    http_version: 
  recorded_at: Sun, 22 Oct 2017 16:51:37 GMT
- request:
    method: get
    uri: https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&rvprop=content&titles=sdcghjkl
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - en.wikipedia.org
      User-Agent:
      - http.rb/3.0.0
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 22 Oct 2017 16:59:04 GMT
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '137'
      Connection:
      - close
      Server:
      - mw1200.eqiad.wmnet
      X-Powered-By:
      - HHVM/3.18.6-dev
      X-Content-Type-Options:
      - nosniff
      Cache-Control:
      - private, must-revalidate, max-age=0
      P3p:
      - CP="This is not a P3P policy! See https://en.wikipedia.org/wiki/Special:CentralAutoLogin/P3P
        for more info."
      X-Frame-Options:
      - SAMEORIGIN
      Content-Disposition:
      - inline; filename="api-result.json"
      Vary:
      - Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization
      Backend-Timing:
      - D=53198 t=1508691544089335
      X-Varnish:
      - 245847913, 244834663, 212232242, 697277731
      Via:
      - 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      X-Cache:
      - cp1053 pass, cp2023 pass, cp4028 pass, cp4017 pass
      X-Cache-Status:
      - pass
      Strict-Transport-Security:
      - max-age=106384710; includeSubDomains; preload
      Set-Cookie:
      - GeoIP=US:CA:Mountain_View:37.42:-122.06:v4; Path=/; secure; Domain=.wikipedia.org
      - WMF-Last-Access-Global=22-Oct-2017;Path=/;Domain=.wikipedia.org;HttpOnly;secure;Expires=Thu,
        23 Nov 2017 12:00:00 GMT
      - WMF-Last-Access=22-Oct-2017;Path=/;HttpOnly;secure;Expires=Thu, 23 Nov 2017
        12:00:00 GMT
      X-Analytics:
      - ns=-1;special=Badtitle;https=1;nocookies=1
      X-Client-Ip:
      - 35.201.173.36
    body:
      encoding: UTF-8
      string: '{"batchcomplete":"","query":{"normalized":[{"from":"sdcghjkl","to":"Sdcghjkl"}],"pages":{"-1":{"ns":0,"title":"Sdcghjkl","missing":""}}}}'
    http_version: 
  recorded_at: Sun, 22 Oct 2017 16:59:04 GMT
- request:
    method: get
    uri: https://en.wikipedia.org/w/api.php?action=query&format=json&prop=revisions&rvprop=content&titles=sdcghjkl/ppp
    body:
      encoding: UTF-8
      string: ''
    headers:
      Accept:
      - application/json
      Connection:
      - close
      Host:
      - en.wikipedia.org
      User-Agent:
      - http.rb/3.0.0
  response:
    status:
      code: 200
      message: OK
    headers:
      Date:
      - Sun, 22 Oct 2017 16:59:38 GMT
      Content-Type:
      - application/json; charset=utf-8
      Content-Length:
      - '149'
      Connection:
      - close
      Server:
      - mw1314.eqiad.wmnet
      X-Powered-By:
      - HHVM/3.18.6-dev
      X-Content-Type-Options:
      - nosniff
      Cache-Control:
      - private, must-revalidate, max-age=0
      P3p:
      - CP="This is not a P3P policy! See https://en.wikipedia.org/wiki/Special:CentralAutoLogin/P3P
        for more info."
      X-Frame-Options:
      - SAMEORIGIN
      Content-Disposition:
      - inline; filename="api-result.json"
      Vary:
      - Accept-Encoding,Treat-as-Untrusted,X-Forwarded-Proto,Cookie,Authorization
      Backend-Timing:
      - D=36114 t=1508691577922302
      X-Varnish:
      - 577930288, 38196047, 344530520, 702593587
      Via:
      - 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4, 1.1 varnish-v4
      Accept-Ranges:
      - bytes
      Age:
      - '0'
      X-Cache:
      - cp1055 pass, cp2007 pass, cp4018 pass, cp4017 pass
      X-Cache-Status:
      - pass
      Strict-Transport-Security:
      - max-age=106384710; includeSubDomains; preload
      Set-Cookie:
      - GeoIP=US:CA:Mountain_View:37.42:-122.06:v4; Path=/; secure; Domain=.wikipedia.org
      - WMF-Last-Access-Global=22-Oct-2017;Path=/;Domain=.wikipedia.org;HttpOnly;secure;Expires=Thu,
        23 Nov 2017 12:00:00 GMT
      - WMF-Last-Access=22-Oct-2017;Path=/;HttpOnly;secure;Expires=Thu, 23 Nov 2017
        12:00:00 GMT
      X-Analytics:
      - ns=-1;special=Badtitle;https=1;nocookies=1
      X-Client-Ip:
      - 35.201.173.36
    body:
      encoding: UTF-8
      string: '{"batchcomplete":"","query":{"normalized":[{"from":"sdcghjkl/ppp","to":"Sdcghjkl/ppp"}],"pages":{"-1":{"ns":0,"title":"Sdcghjkl/ppp","missing":""}}}}'
    http_version: 
  recorded_at: Sun, 22 Oct 2017 16:59:38 GMT
recorded_with: VCR 3.0.3
